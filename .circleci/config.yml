version: 2
jobs:
  build:
    working_directory: ~/company_service
    docker:
      - image: circleci/python:3.6.4
        environment:
          PIPENV_IGNORE_VIRTUALENVS: True
          PIPENV_VENV_IN_PROJECT: True
          PIPENV_DONT_LOAD_ENV: 0
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: company_service

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          keys:
            - v1-pipenv-cache-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - v1-pipenv-cache-{{ .Branch }}-
            - v1-pipenv-cache-
      - run:
          name: Installing dependencies and setting up environment
          command: |
            pipenv install --dev
            cp company_service/settings/local.py.example company_service/settings/local.py
            cp company_service/settings/test.py.example company_service/settings/test.py
            cp .env.example .env
            pipenv run python3 manage.py makemigrations
            pipenv run python3 manage.py migrate
      - save_cache:
          key: pipenv-cache-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - .venv
            - /usr/local/bin
            - /usr/local/lib/python3.6/site-packages 
      - run:
          name: Running tests
          command: |
            pipenv run python3 manage.py test
      - run:
          name: Checking deploy
          command: pipenv run python3 manage.py check --deploy
          environment:
            DJANGO_SETTINGS_MODULE: 'company_service.settings.production'
            SECRET_KEY: $SECRET_KEY
            ALLOWED_HOSTS: '.example.org'
  deploy:
    staging:
      branch: master
      heroku:
        appname: vision-i40-staging
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploying and migrating on Heroku
          command: |
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
              release: python3 manage.py migrate --no-input

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master